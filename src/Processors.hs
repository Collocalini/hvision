
module Processors (

identity,
stringToIntList,
intListToString,
derivative

) where


eol_char = "\n"


------------------------------------ section of processors -----------------------------------------



{-- ================================================================================================
================================================================================================ --}
identity :: [(Int, Int)] -> [(Int, Int)]
identity  row = row
---------------------------------




{-- ================================================================================================
================================================================================================ --}
derivative :: [(Int, Int)] -> [(Int, Int)]
derivative  [] = []
derivative  (prev@(x_prev, y_prev):x_rest) = ((\(x, y) -> (x, y-y_prev) ) $ head x_rest):
             (derivative $ tail x_rest)
---------------------------------




-------------------------------- end of section of processors --------------------------------------




{-- ================================================================================================
================================================================================================ --}
stringToIntList :: String -> [(Int, Int)]
stringToIntList str =  map step1 $ lines str
  where
  step1 :: String -> (Int, Int)
  step1 str = (\x -> (read $ head x , read $ head $ tail x) ) $ words str
------------------------------




{-- ================================================================================================
================================================================================================ --}
intListToString :: [(Int, Int)] -> String
intListToString x = concat $ map (\(x,y) -> (show x) ++ " " ++ (show y) ++ eol_char ) x
---------------------------------






{-- ================================================================================================
================================================================================================ --}
ioStringToIntList_second_graph :: IO String -> [(Int, Int)]
ioStringToIntList_second_graph str = [(1,1)]


------------------------------




{-- ================================================================================================
================================================================================================ --}
intListToIoString_second_graph :: [(Int, Int)] -> IO String
intListToIoString_second_graph x = return ""

---------------------------------






{-- ================================================================================================
================================================================================================ --}
ioStringToIntList_third_graph :: IO String -> [(Int, Int)]
ioStringToIntList_third_graph str = [(1,1)]

------------------------------




{-- ================================================================================================
================================================================================================ --}
intListToIoString_third_graph :: [(Int, Int)] -> IO String
intListToIoString_third_graph x = return ""


---------------------------------





